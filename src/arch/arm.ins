/* $Id$ */
/* Copyright (c) 2011 Pierre Pronchery <khorben@defora.org> */
/* This file is part of DeforaOS Devel asm */
/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. */



/* generic */
/* registers */

/* conditions */
#define eq		(0x0 << 28)
#define ne		(0x1 << 28)
#define cs		(0x2 << 28)
#define cc		(0x3 << 28)
#define mi		(0x4 << 28)
#define pl		(0x5 << 28)
#define vs		(0x6 << 28)
#define vc		(0x7 << 28)
#define hi		(0x8 << 28)
#define ls		(0x9 << 28)
#define ge		(0xa << 28)
#define lt		(0xb << 28)
#define gt		(0xc << 28)
#define le		(0xd << 28)
#define al		(0xe << 28)

/* opcodes */
#define OPNOP		AO_IMMEDIATE(0, 32, 0)
#define OP_R		AO_REGISTER(0, 32, 0)

/* branch, branch with link */
#define OPB(cond)	(cond | 0x5 << 25)
#define OPBL(cond)	(cond | 0x5 << 25 | 0x1 << 24)

/* branch and exchange */
#define OPBX(cond)	(cond | 0x12fff1 << 4)

/* data processing */
#define OP_DATA2	AO_IMMEDIATE(0, 12, 0)


/* instructions */
#if 1 /* FIXME really implement */
{ "adc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "add",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "and",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
/* b */
{ "b",		OPB(al),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "beq",	OPB(eq),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bne",	OPB(ne),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bcs",	OPB(cs),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bcc",	OPB(cc),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bmi",	OPB(mi),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bpl",	OPB(pl),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bvs",	OPB(vs),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bvc",	OPB(vc),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bhi",	OPB(hi),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bls",	OPB(ls),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bge",	OPB(ge),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blt",	OPB(lt),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bgt",	OPB(gt),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bge",	OPB(ge),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bal",	OPB(al),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
/* bic */
{ "bic",	0x00000000,	OPNOP,	OP_R,     OP_R,     OP_DATA2	},
/* bl */
{ "bl",		OPBL(al),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bleq",	OPBL(eq),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blne",	OPBL(ne),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blcs",	OPBL(cs),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blcc",	OPBL(cc),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blmi",	OPBL(mi),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blpl",	OPBL(pl),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blvs",	OPBL(vs),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blvc",	OPBL(vc),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blhi",	OPBL(hi),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blls",	OPBL(ls),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blge",	OPBL(ge),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "bllt",	OPBL(lt),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blgt",	OPBL(gt),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blge",	OPBL(ge),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "blal",	OPBL(al),	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
/* bx */
{ "bx",		OPBX(al),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxeq",	OPBX(eq),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxne",	OPBX(ne),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxcs",	OPBX(cs),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxcc",	OPBX(cc),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxmi",	OPBX(mi),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxpl",	OPBX(pl),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxvs",	OPBX(vs),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxvc",	OPBX(vc),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxhi",	OPBX(hi),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxls",	OPBX(ls),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxge",	OPBX(ge),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxlt",	OPBX(lt),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxgt",	OPBX(gt),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxge",	OPBX(ge),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
{ "bxal",	OPBX(al),	OPNOP,	OP_R,     AOT_NONE, AOT_NONE	},
/* cdp */
{ "cdp",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "cmn",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "cmp",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "eor",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "ldc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "ldm",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "ldr",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "mla",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "mov",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "mrc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "mrs",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
/* msr */
{ "msr",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msreq",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrne",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrcs",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrcc",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrmi",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrpl",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrvs",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrvc",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrhi",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrls",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrge",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrlt",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrgt",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msrle",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "msral",	0x00000000,	OPNOP,	OP_R,     OP_R,     AOT_NONE	},
{ "mul",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "mvn",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "nop",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "orr",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "rsb",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "rsc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "sbc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "stc",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "stm",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "str",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "sub",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "swi",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "swp",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "teq",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
{ "tst",	0x00000000,	OPNOP,	AOT_NONE, AOT_NONE, AOT_NONE	},
#endif
