/* platform-specific */
#if defined(ARCH_i386_real) /* i386 in real mode */
# define W		16
# define REG_AX_id	REG_ax_id
#else /* i386 and compatible in 32-bit protected mode */
# define W		32
# define REG_AX_id	REG_eax_id
#endif


/* helpers */
/* opcodes */
#define OP1F		(8 << AOD_SIZE)
#define OP2F		(16 << AOD_SIZE)

/* operands */
/* registers */
#define OP_R8		AO_REGISTER(0, 8, 0)
#define OP_RW		AO_REGISTER(0, W, 0)
#define OP_al		AO_REGISTER(AOF_IMPLICIT, REG_al_size, REG_al_id)
#define OP_AX		AO_REGISTER(AOF_IMPLICIT, W, REG_AX_id)
#define OP_eax		AO_REGISTER(AOF_IMPLICIT, 32, REG_eax_id)
#define OP_ecx		AO_REGISTER(AOF_IMPLICIT, 32, REG_ecx_id)
#define OP_edx		AO_REGISTER(AOF_IMPLICIT, 32, REG_edx_id)
#define OP_ebx		AO_REGISTER(AOF_IMPLICIT, 32, REG_ebx_id)
#define OP_esp		AO_REGISTER(AOF_IMPLICIT, 32, REG_esp_id)
#define OP_ebp		AO_REGISTER(AOF_IMPLICIT, 32, REG_ebp_id)
#define OP_esi		AO_REGISTER(AOF_IMPLICIT, 32, REG_esi_id)
#define OP_edi		AO_REGISTER(AOF_IMPLICIT, 32, REG_edi_id)

/* mod r/m byte */
#define AOF_I386_MODRM	0x2
#define OP_RM8_D0	AO_DREGISTER(AOF_I386_MODRM, 0, W, 0)	/* 0x00 */
#define OP_RM8_D8	AO_DREGISTER(AOF_I386_MODRM, 8, W, 0)	/* 0x40 */
#define OP_RM8_DW	AO_DREGISTER(AOF_I386_MODRM, W, W, 0)	/* 0x80 */
#define OP_RM8_R8	AO_REGISTER(AOF_I386_MODRM, 8, 0)	/* 0xc0 */
#define OP_RM8_D0_R	AO_DREGISTER(AOF_I386_MODRM, 0, W, 8)	/* 0x00 */
#define OP_RM8_D8_R	AO_DREGISTER(AOF_I386_MODRM, 8, W, 8)	/* 0x40 */
#define OP_RM8_DW_R	AO_DREGISTER(AOF_I386_MODRM, W, W, 8)	/* 0x80 */
#define OP_RM8_R8_R	AO_REGISTER(AOF_I386_MODRM, 8, 8)	/* 0xc0 */
#define OP_RMW_D0	AO_DREGISTER(AOF_I386_MODRM, 0, W, 0)	/* 0x00 */
#define OP_RMW_D8	AO_DREGISTER(AOF_I386_MODRM, 8, W, 0)	/* 0x40 */
#define OP_RMW_DW	AO_DREGISTER(AOF_I386_MODRM, W, W, 0)	/* 0x80 */
#define OP_RMW_RW	AO_REGISTER(AOF_I386_MODRM, W, 0)	/* 0xc0 */
#define OP_RMW_D0_R	AO_DREGISTER(AOF_I386_MODRM, 0, W, 8)	/* 0x00 */
#define OP_RMW_D8_R	AO_DREGISTER(AOF_I386_MODRM, 8, W, 8)	/* 0x40 */
#define OP_RMW_DW_R	AO_DREGISTER(AOF_I386_MODRM, W, W, 8)	/* 0x80 */
#define OP_RMW_RW_R	AO_REGISTER(AOF_I386_MODRM, W, 8)	/* 0xc0 */

/* immediate values */
#define OP_S8		AO_IMMEDIATE(AOF_SIGNED, 0, 8)
#define OP_SW		AO_IMMEDIATE(AOF_SIGNED, 0, W)
#define OP_U8		AO_IMMEDIATE(0, 0, 8)
#define OP_UW		AO_IMMEDIATE(0, 0, W)


/* instructions */
{ "aaa",	0x37,		OP1F, AOT_NONE,   AOT_NONE,  AOT_NONE	},
{ "aad",	0xd50a,		OP2F, AOT_NONE,   AOT_NONE,  AOT_NONE	},
{ "aad",	0xd5,		OP1F, OP_U8,      AOT_NONE,  AOT_NONE	},
{ "aam",	0xd40a,		OP2F, AOT_NONE,   AOT_NONE,  AOT_NONE	},
{ "aam",	0xd4,		OP1F, OP_U8,      AOT_NONE,  AOT_NONE	},
{ "aas",	0x3f,		OP1F, AOT_NONE,   AOT_NONE,  AOT_NONE	},
/* ADC		0x10 /r		1     r/m8        r8			*/
{ "adc",	0x10,		OP1F, OP_RM8_D0_R,OP_R8,     AOT_NONE	},
{ "adc",	0x10,		OP1F, OP_RM8_D8_R,OP_R8,     AOT_NONE	},
{ "adc",	0x10,		OP1F, OP_RM8_DW_R,OP_R8,     AOT_NONE	},
{ "adc",	0x10,		OP1F, OP_RM8_R8_R,OP_R8,     AOT_NONE	},
/* ADC		0x11 /r		1     r/mW        rW			*/
{ "adc",	0x11,		OP1F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "adc",	0x11,		OP1F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "adc",	0x11,		OP1F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "adc",	0x11,		OP1F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* ADC		0x12 /r		1     r8          r/m8			*/
#if 1 /* FIXME doesn't work at the moment */
{ "adc",	0x12,		OP1F, OP_RM8_R8_R,OP_RM8_D0_R,AOT_NONE	},
{ "adc",	0x12,		OP1F, OP_RM8_R8_R,OP_RM8_D8_R,AOT_NONE	},
{ "adc",	0x12,		OP1F, OP_RM8_R8_R,OP_RM8_DW_R,AOT_NONE	},
{ "adc",	0x12,		OP1F, OP_RM8_R8_R,OP_RM8_R8_R,AOT_NONE	},
#endif
/* ADC		0x13 /r		1     rW          r/mW			*/
#if 1 /* FIXME doesn't work at the moment */
{ "adc",	0x13,		OP1F, OP_RMW_RW_R,OP_RMW_D0_R,AOT_NONE	},
{ "adc",	0x13,		OP1F, OP_RMW_RW_R,OP_RMW_D8_R,AOT_NONE	},
{ "adc",	0x13,		OP1F, OP_RMW_RW_R,OP_RMW_DW_R,AOT_NONE	},
{ "adc",	0x13,		OP1F, OP_RMW_RW_R,OP_RMW_RW_R,AOT_NONE	},
#endif
/* ADC		0x14 ib		1     al          imm8			*/
{ "adc",	0x14,		OP1F, OP_al,	  OP_S8,     AOT_NONE	},
/* ADC		0x15 iW		1     AX          immW			*/
{ "adc",	0x15,		OP1F, OP_AX,	  OP_SW,     AOT_NONE	},
/* ADC		0x80 /2 ib	1     r/m8        imm8			*/
{ "adc",	0x80,		OP1F, OP_RM8_D0+2,OP_S8,     AOT_NONE	},
{ "adc",	0x80,		OP1F, OP_RM8_D8+2,OP_S8,     AOT_NONE	},
{ "adc",	0x80,		OP1F, OP_RM8_DW+2,OP_S8,     AOT_NONE	},
{ "adc",	0x80,		OP1F, OP_RM8_R8+2,OP_S8,     AOT_NONE	},
/* ADC		0x81 /2 iW	1     r/mW        imm8			*/
{ "adc",	0x81,		OP1F, OP_RMW_D0+2,OP_SW,     AOT_NONE	},
{ "adc",	0x81,		OP1F, OP_RMW_D8+2,OP_SW,     AOT_NONE	},
{ "adc",	0x81,		OP1F, OP_RMW_DW+2,OP_SW,     AOT_NONE	},
{ "adc",	0x81,		OP1F, OP_RMW_RW+2,OP_SW,     AOT_NONE	},
/* ADC		0x83 /2 i8	1     r/mW        imm8			*/
{ "adc",	0x83,		OP1F, OP_RMW_D0+2,OP_S8,     AOT_NONE	},
{ "adc",	0x83,		OP1F, OP_RMW_D8+2,OP_S8,     AOT_NONE	},
{ "adc",	0x83,		OP1F, OP_RMW_DW+2,OP_S8,     AOT_NONE	},
{ "adc",	0x83,		OP1F, OP_RMW_RW+2,OP_S8,     AOT_NONE	},
/* ADD		0x00 /r		1     r/m8        r8			*/
{ "add",	0x00,		OP1F, OP_RM8_D0_R,OP_R8,     AOT_NONE	},
{ "add",	0x00,		OP1F, OP_RM8_D8_R,OP_R8,     AOT_NONE	},
{ "add",	0x00,		OP1F, OP_RM8_DW_R,OP_R8,     AOT_NONE	},
{ "add",	0x00,		OP1F, OP_RM8_R8_R,OP_R8,     AOT_NONE	},
/* ADD		0x01 /r		1     r/mW        rW			*/
{ "add",	0x01,		OP1F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "add",	0x01,		OP1F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "add",	0x01,		OP1F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "add",	0x01,		OP1F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* ADD		0x02 /r		1     r8          r/m8			*/
#if 1 /* FIXME probably doesn't work at the moment */
{ "add",	0x02,		OP1F, OP_RM8_R8_R,OP_RM8_D0_R,AOT_NONE	},
{ "add",	0x02,		OP1F, OP_RM8_R8_R,OP_RM8_D8_R,AOT_NONE	},
{ "add",	0x02,		OP1F, OP_RM8_R8_R,OP_RM8_DW_R,AOT_NONE	},
{ "add",	0x02,		OP1F, OP_RM8_R8_R,OP_RM8_R8_R,AOT_NONE	},
#endif
/* ADD		0x03 /r		1     rW          r/mW			*/
#if 1 /* FIXME probably doesn't work at the moment */
{ "add",	0x03,		OP1F, OP_RMW_RW_R,OP_RMW_D0_R,AOT_NONE	},
{ "add",	0x03,		OP1F, OP_RMW_RW_R,OP_RMW_D8_R,AOT_NONE	},
{ "add",	0x03,		OP1F, OP_RMW_RW_R,OP_RMW_DW_R,AOT_NONE	},
{ "add",	0x03,		OP1F, OP_RMW_RW_R,OP_RMW_RW_R,AOT_NONE	},
#endif
/* ADD		0x04 ib		1     al          imm8			*/
{ "add",	0x04,		OP1F, OP_al,	  OP_S8,     AOT_NONE	},
/* ADD		0x05 iW		1     AX          immW			*/
{ "add",	0x05,		OP1F, OP_AX,	  OP_SW,     AOT_NONE	},
/* ADD		0x80 /0 ib	1     r/m8        imm8			*/
{ "add",	0x80,		OP1F, OP_RM8_D0+0,OP_S8,     AOT_NONE	},
{ "add",	0x80,		OP1F, OP_RM8_D8+0,OP_S8,     AOT_NONE	},
{ "add",	0x80,		OP1F, OP_RM8_DW+0,OP_S8,     AOT_NONE	},
{ "add",	0x80,		OP1F, OP_RM8_R8+0,OP_S8,     AOT_NONE	},
/* ADD		0x81 /0 iW	1     r/mW        imm8			*/
{ "add",	0x81,		OP1F, OP_RMW_D0+0,OP_SW,     AOT_NONE	},
{ "add",	0x81,		OP1F, OP_RMW_D8+0,OP_SW,     AOT_NONE	},
{ "add",	0x81,		OP1F, OP_RMW_DW+0,OP_SW,     AOT_NONE	},
{ "add",	0x81,		OP1F, OP_RMW_RW+0,OP_SW,     AOT_NONE	},
/* ADD		0x83 /0 i8	1     r/mW        imm8			*/
{ "add",	0x83,		OP1F, OP_RMW_D0+0,OP_S8,     AOT_NONE	},
{ "add",	0x83,		OP1F, OP_RMW_D8+0,OP_S8,     AOT_NONE	},
{ "add",	0x83,		OP1F, OP_RMW_DW+0,OP_S8,     AOT_NONE	},
{ "add",	0x83,		OP1F, OP_RMW_RW+0,OP_S8,     AOT_NONE	},
/* AND		0x20 /r		1     r/m8        r8			*/
{ "and",	0x20,		OP1F, OP_RM8_D0_R,OP_R8,     AOT_NONE	},
{ "and",	0x20,		OP1F, OP_RM8_D8_R,OP_R8,     AOT_NONE	},
{ "and",	0x20,		OP1F, OP_RM8_DW_R,OP_R8,     AOT_NONE	},
{ "and",	0x20,		OP1F, OP_RM8_R8_R,OP_R8,     AOT_NONE	},
/* AND		0x21 /r		1     r/mW        rW			*/
{ "and",	0x21,		OP1F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "and",	0x21,		OP1F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "and",	0x21,		OP1F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "and",	0x21,		OP1F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* AND		0x22 /r		1     r8          r/m8			*/
#if 1 /* FIXME probably doesn't work at the moment */
{ "and",	0x22,		OP1F, OP_RM8_R8_R,OP_RM8_D0_R,AOT_NONE	},
{ "and",	0x22,		OP1F, OP_RM8_R8_R,OP_RM8_D8_R,AOT_NONE	},
{ "and",	0x22,		OP1F, OP_RM8_R8_R,OP_RM8_DW_R,AOT_NONE	},
{ "and",	0x22,		OP1F, OP_RM8_R8_R,OP_RM8_R8_R,AOT_NONE	},
#endif
/* AND		0x23 /r		1     rW          r/mW			*/
#if 1 /* FIXME probably doesn't work at the moment */
{ "and",	0x23,		OP1F, OP_RMW_RW_R,OP_RMW_D0_R,AOT_NONE	},
{ "and",	0x23,		OP1F, OP_RMW_RW_R,OP_RMW_D8_R,AOT_NONE	},
{ "and",	0x23,		OP1F, OP_RMW_RW_R,OP_RMW_DW_R,AOT_NONE	},
{ "and",	0x23,		OP1F, OP_RMW_RW_R,OP_RMW_RW_R,AOT_NONE	},
#endif
/* AND		0x24 ib		1     al          imm8			*/
{ "and",	0x24,		OP1F, OP_al,	  OP_S8,     AOT_NONE	},
/* AND		0x25 iW		1     AX          immW			*/
{ "and",	0x25,		OP1F, OP_AX,	  OP_SW,     AOT_NONE	},
/* AND		0x80 /0 ib	1     r/m8        imm8			*/
{ "and",	0x80,		OP1F, OP_RM8_D0+4,OP_S8,     AOT_NONE	},
{ "and",	0x80,		OP1F, OP_RM8_D8+4,OP_S8,     AOT_NONE	},
{ "and",	0x80,		OP1F, OP_RM8_DW+4,OP_S8,     AOT_NONE	},
{ "and",	0x80,		OP1F, OP_RM8_R8+4,OP_S8,     AOT_NONE	},
/* AND		0x81 /0 iW	1     r/mW        imm8			*/
{ "and",	0x81,		OP1F, OP_RMW_D0+4,OP_SW,     AOT_NONE	},
{ "and",	0x81,		OP1F, OP_RMW_D8+4,OP_SW,     AOT_NONE	},
{ "and",	0x81,		OP1F, OP_RMW_DW+4,OP_SW,     AOT_NONE	},
{ "and",	0x81,		OP1F, OP_RMW_RW+4,OP_SW,     AOT_NONE	},
/* AND		0x83 /0 i8	1     r/mW        imm8			*/
{ "and",	0x83,		OP1F, OP_RMW_D0+4,OP_S8,     AOT_NONE	},
{ "and",	0x83,		OP1F, OP_RMW_D8+4,OP_S8,     AOT_NONE	},
{ "and",	0x83,		OP1F, OP_RMW_DW+4,OP_S8,     AOT_NONE	},
{ "and",	0x83,		OP1F, OP_RMW_RW+4,OP_S8,     AOT_NONE	},
/* ARPL */
/* FIXME implement */
/* BOUND */
/* FIXME implement */
/* BSF		0x0fbc		2     rW          r/mW			*/
#if 1 /* FIXME doesn't work at the moment */
{ "bsf",	0x0fbc,		OP2F, OP_RMW_RW_R,OP_RMW_D0_R,AOT_NONE	},
{ "bsf",	0x0fbc,		OP2F, OP_RMW_RW_R,OP_RMW_D8_R,AOT_NONE	},
{ "bsf",	0x0fbc,		OP2F, OP_RMW_RW_R,OP_RMW_DW_R,AOT_NONE	},
{ "bsf",	0x0fbc,		OP2F, OP_RMW_RW_R,OP_RMW_RW_R,AOT_NONE	},
#endif
/* BSR		0x0fbd		2     rW          r/mW			*/
#if 1 /* FIXME doesn't work at the moment */
{ "bsr",	0x0fbd,		OP2F, OP_RMW_RW_R,OP_RMW_D0_R,AOT_NONE	},
{ "bsr",	0x0fbd,		OP2F, OP_RMW_RW_R,OP_RMW_D8_R,AOT_NONE	},
{ "bsr",	0x0fbd,		OP2F, OP_RMW_RW_R,OP_RMW_DW_R,AOT_NONE	},
{ "bsr",	0x0fbd,		OP2F, OP_RMW_RW_R,OP_RMW_RW_R,AOT_NONE	},
#endif
/* BT		0x0fa3		2     r/mW        rW			*/
{ "bt",		0x0fa3,		OP2F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "bt",		0x0fa3,		OP2F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "bt",		0x0fa3,		OP2F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "bt",		0x0fa3,		OP2F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* BT		0x0fba /4 ib	2     r/mW        imm8			*/
{ "bt",		0x0fba,		OP2F, OP_RMW_D0+4,OP_S8,     AOT_NONE	},
{ "bt",		0x0fba,		OP2F, OP_RMW_D8+4,OP_S8,     AOT_NONE	},
{ "bt",		0x0fba,		OP2F, OP_RMW_DW+4,OP_S8,     AOT_NONE	},
{ "bt",		0x0fba,		OP2F, OP_RMW_RW+4,OP_S8,     AOT_NONE	},
/* BTC		0x0fbb		2     r/mW        rW			*/
{ "btc",	0x0fbb,		OP2F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "btc",	0x0fbb,		OP2F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "btc",	0x0fbb,		OP2F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "btc",	0x0fbb,		OP2F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* BTC		0x0fba /7 ib	2     r/mW        imm8			*/
{ "btc",	0x0fba,		OP2F, OP_RMW_D0+7,OP_S8,     AOT_NONE	},
{ "btc",	0x0fba,		OP2F, OP_RMW_D8+7,OP_S8,     AOT_NONE	},
{ "btc",	0x0fba,		OP2F, OP_RMW_DW+7,OP_S8,     AOT_NONE	},
{ "btc",	0x0fba,		OP2F, OP_RMW_RW+7,OP_S8,     AOT_NONE	},
/* BTR		0x0fb3		2     r/mW        rW			*/
{ "btr",	0x0fb3,		OP2F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "btr",	0x0fb3,		OP2F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "btr",	0x0fb3,		OP2F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "btr",	0x0fb3,		OP2F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* BTR		0x0fba /6 ib	2     r/mW        imm8			*/
{ "btr",	0x0fba,		OP2F, OP_RMW_D0+6,OP_S8,     AOT_NONE	},
{ "btr",	0x0fba,		OP2F, OP_RMW_D8+6,OP_S8,     AOT_NONE	},
{ "btr",	0x0fba,		OP2F, OP_RMW_DW+6,OP_S8,     AOT_NONE	},
{ "btr",	0x0fba,		OP2F, OP_RMW_RW+6,OP_S8,     AOT_NONE	},
/* BTS		0x0fab		2     r/mW        rW			*/
{ "bts",	0x0fab,		OP2F, OP_RMW_D0_R,OP_RW,     AOT_NONE	},
{ "bts",	0x0fab,		OP2F, OP_RMW_D8_R,OP_RW,     AOT_NONE	},
{ "bts",	0x0fab,		OP2F, OP_RMW_DW_R,OP_RW,     AOT_NONE	},
{ "bts",	0x0fab,		OP2F, OP_RMW_RW_R,OP_RW,     AOT_NONE	},
/* BTS		0x0fba /5 ib	2     r/mW        imm8			*/
{ "bts",	0x0fba,		OP2F, OP_RMW_D0+5,OP_S8,     AOT_NONE	},
{ "bts",	0x0fba,		OP2F, OP_RMW_D8+5,OP_S8,     AOT_NONE	},
{ "bts",	0x0fba,		OP2F, OP_RMW_DW+5,OP_S8,     AOT_NONE	},
{ "bts",	0x0fba,		OP2F, OP_RMW_RW+5,OP_S8,     AOT_NONE	},
/* NOP									*/
{ "nop",	0x90,		OP1F, AOT_NONE,   AOT_NONE,  AOT_NONE	},
